
 <button type="submit">Post Comment</button>
            </form>
          </bdo>
        </div>
      `;
      newDiv.className = 'crip';
      document.getElementById("com").appendChild(newDiv);

      // Hide name input if user is logged in
      if (currentUserName) {
        const nameInputField = newDiv.querySelector(`#commenterName-${itemId}`);
        if (nameInputField) nameInputField.parentElement.style.display = 'none';
      }

      // Click tracking
      newDiv.addEventListener('click', (event) => {
        if (event.target.closest('.comment-section')) return;
        const clickedItems = JSON.parse(localStorage.getItem('clickedItems') || '[]');
        if (clickedItems.includes(itemId)) return;

        const itemRef = doc(db, "ginidev", itemId);
        updateDoc(itemRef, { clicks: increment(1) })
          .then(() => {
            clickedItems.push(itemId);
            localStorage.setItem('clickedItems', JSON.stringify(clickedItems));
          })
          .catch(console.error);
      });

      // Live click and vote updates
      const itemRef = doc(db, "ginidev", itemId);
      onSnapshot(itemRef, (docUpdate) => {
        const updatedData = docUpdate.data();
        document.getElementById(`click-count-${itemId}`).textContent = `${updatedData.clicks || 0} VIEWS`;
        document.getElementById(`upvotes-${itemId}`).textContent = updatedData.upvotes || 0;
        document.getElementById(`downvotes-${itemId}`).textContent = updatedData.downvotes || 0;
      });

      // Comments
      const commentsQuery = query(collection(db, "comments"), orderBy("createdAt", "asc"));
      onSnapshot(commentsQuery, (commentsSnapshot) => {
        const itemComments = [];
        commentsSnapshot.forEach((commentDoc) => {
          if (commentDoc.data().itemId === itemId) {
            itemComments.push(commentDoc.data());
          }
        });
        displayComments(itemId, itemComments);
      });

      const commentForm = document.getElementById(`comment-form-${itemId}`);
      if (commentForm) {
        commentForm.addEventListener('submit', (event) => {
          event.preventDefault();
          const commentText = commentForm.querySelector('textarea').value.replace(/-i\(([^\{\}\[\]\(\)\|]*)\s?\|([^\(\)]*)\)/gi,"+$+img src='$1' alt=$2//:-").replace(/-v\(([^\{\}\[\]\(\)\|]*)\s?\|([^\(\)]*)\)/gi,'+$+video autoplay muted loop src="$1" id=valvideo-$2/:- +$+/video/:-').replace(/\*\*(.*?)\*\*/g, "+$+b/:-$1+$+/b/:-").replace(/```([\s\S]*?)```/g, " +$+pre/:- +$+code/:-$1+$+/code/:- +$+/pre/:-").replace(/`(.*?)`/g, "+$+code/:-+$+mark style='background:#ddd;border-radius:2px;'/:-$1+$+/mark/:-+$+/code/:-").replace(/\</g, '&lt;').replace(/\>/g, '&gt;').replace(/\/\:\-/gi, '>').replace(/\+\$\+/gi, '<').replace(/\n/g, '<br>').replace(/\s{2}/g,'&ensp;');
          let commenterName = currentUserName || commentForm.querySelector(`#commenterName-${itemId}`).value.trim() || 'Anonymous';

          if (commentText) {
            addDoc(commentsCollection, {
              itemId,
              text: commentText,
              commenterName,
              createdAt: new Date()
            }).then(() => {
              commentForm.querySelector('textarea').value = '';
              const nameInput = commentForm.querySelector(`#commenterName-${itemId}`);
              if (nameInput) nameInput.value = '';
            }).catch(console.error);
          }
        });
      }

      // Voting
      const upvoteBtn = newDiv.querySelector(`.upvote-btn[data-id="${itemId}"]`);
      const downvoteBtn = newDiv.querySelector(`.downvote-btn[data-id="${itemId}"]`);
      const votedItems = JSON.parse(localStorage.getItem('votedItems') || '{}');

      if (votedItems[itemId]) {
        upvoteBtn.disabled = votedItems[itemId] === 'up';
        downvoteBtn.disabled = votedItems[itemId] === 'down';
      }

      upvoteBtn.addEventListener("click", () => {
        if (votedItems[itemId]) return;
        updateDoc(itemRef, { upvotes: increment(1) }).then(() => {
          votedItems[itemId] = 'up';
          localStorage.setItem('votedItems', JSON.stringify(votedItems));
          upvoteBtn.disabled = true;
          downvoteBtn.disabled = true;
        });
      });

      downvoteBtn.addEventListener("click", () => {
        if (votedItems[itemId]) return;
        updateDoc(itemRef, { downvotes: increment(1) }).then(() => {
          votedItems[itemId] = 'down';
          localStorage.setItem('votedItems', JSON.stringify(votedItems));
          upvoteBtn.disabled = true;
          downvoteBtn.disabled = true;
        });
      });

    });
  });
</script>


